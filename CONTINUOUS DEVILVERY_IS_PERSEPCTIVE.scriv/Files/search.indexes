<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="18">
            <Title>Images</Title>
        </Document>
        <Document ID="10">
            <Title>Implementation Plan</Title>
            <Text>Implementation plan
</Text>
        </Document>
        <Document ID="19">
            <Title>ITinvolve_WHITEPAPER_DefineYourDevOpsActionPlan_Nov-2014</Title>
            <Text>￼￼Computer Network Solutions
Define Your DevOps Action Plan
￼￼￼￼￼￼￼￼￼￼A WHITEPAPER FOR IT LEADERS
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼www.ITinvolve.com
￼￼
￼A WHITEPAPER FOR IT LEADERS
Define Your DevOps Action Plan
DevOps is being defined, promoted, touted and discussed as the next game changer in IT. This whitepaper will provide guidance on how you can determine what DevOps will mean for your organization and help you build an action plan to get started.
A common goal cited for DevOps is to enable faster release and deployment cycles by taking advantage of agile development methodologies; improved collaboration between business stakeholders, application development and operations teams; and automation tools that enable the continuous integration of developed code and continuous deployment into production of new capabilities. Beyond these elements, DevOps also requires a cultural acceptance of the need to focus on the flow of work across teams vs. optimizing individual teams and their specific units of work.
There is no “one-size-fits-all” DevOps, no matter what pundits, consultants, and vendors might tell you. It should be grounded in the realities of your specific organization. Start by actually taking a step back. Ensure you are clearly taking into account your industry, your applications, your culture, and your people when developing your DevOps strategy; then apply DevOps principles against that foundation. Because every organization’s purpose will be different, your way of doing DevOps will not be the same as anyone else, even among your industry peers.
Begin With Your Applications
Defining your DevOps action plan starts with an understanding of your industry and your applications. One suggested method is to analyze your business goals and application portfolio using the pace-layering method, which focuses on three categories of applications – systems of record, systems of differentiation, and systems of innovation.
Figure 1
Gartner’s Pace-Layered Application Strategy: Governance and Change Management”
15 April 2011, Bill Swanton
￼￼￼￼www.ITinvolve.com
1
￼
￼A WHITEPAPER FOR IT LEADERS
Define Your DevOps Action Plan
Systems of record are usually stable with infrequent updates. This is often due to regulatory requirements and internal policies, and they tend to have a high degree of consistency within an industry and even across industries. Systems of record are often good candidates for waterfall development methodologies and longer release timelines. Your general ledger or payroll systems are good examples of systems of record.
Systems of differentiation are those applications that are likely common to your industry but where you have an opportunity to differentiate your company from the competition based on functionality and the pace with which you update them. For example, if you are a financial services firm that provides retirement investment programs, you might make changes to your customer portal and how clients select new investment options on a quarterly or monthly basis in order to enhance customer experience and remain competitive and differentiate. If you are an airline, this might be your crew scheduling application, which ensures you have the right flight crews available when needed and can improve your on-time departure percentages to differentiate from the competition. In healthcare, your systems of differentiation might be the applications that health professionals use to store patient information and correlate test results to aid in diagnosis and treatment. In manufacturing it may be your supply chain management, process control, or shop floor applications.
Systems of innovation are those truly groundbreaking applications that help you create new markets and revenue streams. In financial services, that might be a new kind of application that gives day traders a market advantage. For an airline that might be a whole new way of providing inflight entertainment, such as when Wifi and inflight entertainment systems first became available to passengers. In healthcare, it might be a new customer portal that promotes wellness services and reduces office co-pays by uploading fitness tracker data. For a retailer, it might be applications that support a new type of customer loyalty program, such as when Amazon introduced their Amazon Prime service a few years ago.
Both systems of differentiation and systems of innovation are excellent candidates for agile development and DevOps principles. This is because they require high degrees of collaboration between business stakeholders, developers, and operations personnel to ensure the applications are in line with requirements, developed and tested quickly, and then made available in the market to drive competitive differentiation and innovation. They are excellent candidates for the continuous delivery concept in DevOps where small releases are deployed quickly (and can be rolled back just as quickly if there are issues). In this manner, a large number of small deployments moves the competitive needle faster and provides greater value to customers over traditional waterfall development and disconnected development and operations practices.
￼￼￼www.ITinvolve.com 2
￼￼
￼Foster a DevOps Culture
Today, we find more and more businesses putting pressure on IT to move faster, and, if the IT department struggles to keep up, they are often willing to “go around them” and invest in a cloud or other third-party solution on their own to get what they want, when they want it (aka “shadow IT”).
What the business often lacks, however, is a full understanding of the many downstream implications that come with speeding the roll out of new services such as security assessments, integrations to legacy systems, the ongoing cost to administer the solution and take on support for it, etc. It’s true that IT Operations teams want to control the reliability and stability of software deployments and that can often slow things down, but they do this because that’s what they are paid to do: to deliver stable, reliable, and high-performing services.
This conflict between the business’ desire for speed and Operation’s charter for security, reliability, and performance, has been brewing for years and this section will discuss a few tips on how you can foster a more engaged and aligned culture as you define your DevOps action plan.
￼TIP #1: Recognize the cultural challenges between the business, Dev and Ops
Because Development sits closer to the business in the IT value chain, there’s usually less conflict between the business’ desire to move fast and Development. That isn’t to say Development managers aren’t sometimes frustrated by how fast the business wants things given the resources available to them, but they usually are motivated and compensated to move in sync with how fast the business wants to move.
Take a step back and benchmark your current culture for both Dev and Ops, because only then will you be able to understand how DevOps principles may impact those cultures. For Dev, ask yourself, in each line of business “Are we still doing waterfall software development with one release every year or eighteen months, or have we adopted agile methodologies that enable us to deliver multiple releases throughout the year?”
￼￼www.ITinvolve.com 3
￼￼￼￼￼
￼A WHITEPAPER FOR IT LEADERS
Define Your DevOps Action Plan
Based on your answers, then ask, “Is that in line with what the business wants today? Is that in line with what we think makes the most sense or are there opportunities we could bring to the business if we adopted agile more broadly?” Finally, “what would be the value to the business and cultural impact of adopting DevOps principles for continuous integration of new software development?”
Next, ask yourself, “How focused is our Ops team on stability, reliability and clamping down on change vs. accepting (and even desiring) change? And how does this vary by line of business or application area?” If you have a risk-averse Ops culture that’s supporting a fragile infrastructure or many legacy technologies, then you may need to tackle some of those challenges first in order to help your DevOps culture evolve. You should also look at your Ops culture through a compliance lens. Ask yourself, “Are we in a heavily-regulated industry that has created its own cultural challenges in terms of change approvals and auditing that we need to take into account?” Finally, what would be the value to the business and the cultural impact of adopting DevOps principles for continuous delivery of new releases?”
One of the hallmarks of DevOps is the ability to develop smaller pieces of incremental functionality, deploy them faster (perhaps even a few or many times a day), and quickly roll things back if there’s an issue. This is a big leap for many IT cultures on both the Dev and Ops side, so understanding where your culture is today is a critical first step.
TIP #2: Think about how you view work
Do you view work as tasks done by individual teams or in an end-to-end fashion (e.g. from raw materials to finished goods and customer delivery)? DevOps transformation requires focusing on work in an end-to-end manner. Your goal should be to identify where your IT organization’s bottlenecks are, with the intent of reducing pressure at those bottlenecks to increase end-to-end flow and, therefore, output that benefits the business.
IT Operations groups often have a few key individuals that understand their company’s IT environment better than everyone else and are consumed with solving high-profile outages and deploying new application releases, the result is that these team members are constantly putting out fires and unable to get new software released that’s desperately needed by the business. These valued “heroes” can often be bottleneck to your DevOps evolution.
Ask yourself, “Is my organization optimized around end-to-end flow or are we optimizing just at the individual workstations?” If it’s the latter, then you are probably stacking up work somewhere at one or more bottlenecks and should address those first. For example, a development project isn’t truly done until the code is tested and deployed. So incentivizing developers to finish code without knowing when and how it will get deployed is just going to create more work in process stacking up in your IT factory. It’s just like on an automotive line where you might see cars with shiny paint, brand new tires and cutting edge technical design, but if the cars have no seats they simply won’t be shippable.
￼￼￼￼www.ITinvolve.com 4
￼￼
￼TIP #3: Incentivize your people
Don’t assume people will change for the “greater good” that DevOps represents – proactively incentivize them
to do so.
If you want to change your culture and create one that’s more agile – if you want to optimize for flow versus workstations then you should incentivize to initiate the cultural change you seek. Old habits are hard to break even when we want to do things differently. For executives there’s the common tendency to appeal to a higher business purpose and assume the folks contributing on the front lines share the same passion for the company’s success. Often team members intellectually understand these goals, but executives should seek to make the change relevant to how it will improve their jobs as developers, QA team members, sys admins, and architects not just how it impacts C-level objectives.
For example, Ops folks usually take particular pride in their indispensability, but to be indispensable they have to compromise family time, working late and on weekends to push out a big high-risk deployment. They may seek the attention and recognition for such ‘extra effort’, but at the same time they are putting more pressure on themselves and more risk on the business.
As mentioned previously, the move toward a more agile IT with DevOps means deploying with far greater frequency, and that can actually help you operate with less stress and risk. Errors and fixes are likely smaller in effort, and you will be able to roll back hick-ups much faster. Sure your folks may need to stay late occasionally, but they can do their work more often during typical working hours, reclaim their weekends and have significantly less stress and pressure than via traditional large-scale rollouts where expectations are high and so is the risk of failure, re-work, and long days. Plus, with DevOps you are actually delivering on business requirements faster – instead of deploying what was needed months ago.
TIP #4: Make it personal—everyone is different
Realizing everyone is inherently different is critical to incentivizing and empowering your IT team to transform. In most IT organizations, the responsibility is on the first line manager to know their people, understand what makes them tick and channel the right talents and motivations. Some team members may see a move to DevOps as the ideal resume enhancement opportunity. Some may feel intimidation because they are innately risk averse. Still others may not be sure what to think especially if you have one team doing DevOps while they remain on a separate team doing things “the old way”. What’s important for managers is not to stop at how to make DevOps relevant for a role, but to consider the specific individual. Ask yourself, “How will each of my team members react to this cultural change, and how can I tap into their natural motivations to make them enablers of the change not resistors?”
￼￼￼￼www.ITinvolve.com 5
￼￼
￼￼A WHITEPAPER FOR IT LEADERS
Define Your DevOps Action Plan
￼From what I’ve seen, there also is a generational aspect to DevOps cultural transformation. Younger employees who don’t know a world without mobile phones and grew up on social media are likely more comfortable with agile, small release deployments. Those with more experience are also more likely to think about the reasons why DevOps ‘can’t work’ and it will be key for first-line managers to engage them, listen to their concerns, and work to address them in a way that benefits the organization and realizes the wisdom of their experience.
The bottom line here is that if you make it personal you will build trust and that will help you drive transformation in your organization faster. Perhaps even consider establishing a ‘Take a Developer or Ops Team Member to Lunch Day’. By working to understand each other’s worlds, challenges, pressures and goals you can unleash a swifter cultural change within your organization.
Tools are Important Too
In IT, we’re inundated with tools. Developers have their favorite tools and sys admins do too, so does the project office, the service support group, and the QA team. There are IT tools purchased by organizations years ago that are still being used and others that aren’t, tools organizations have recently started using, and others being considered at any given point in time. There are also general-purpose tools the company wants employees to use for things like document sharing, instant messaging, and so on. It’s gotten to the point where a lot of IT organizations say, “We have two of everything like Noah’s ark”, yet they still want more tools.
￼￼￼￼Part of the reason is that IT practitioners like gadgets and tools. We like the fact that they help us do things and amplify our own abilities, but we also know they can fragment information and can blindside us when someone uses a tool to do something that others weren’t aware of.
￼www.ITinvolve.com 6
￼￼
￼￼Do we really need more tools to do DevOps?
DevOps has a close association with the Agile Software Development movement, and one of the core tenets of the Agile Manifesto is to value “Individuals and Interactions over processes and tools”. Nevertheless, it’s hard to find a DevOps talk or article that doesn’t discuss the need for tools like git, docker, jenkins, puppet, chef, and so on. The reason for this is straight-forward: continuous integration and continuous delivery are best done through automation so we can follow a repeatable method and roll things back quickly if there are issues.
At a more basic level, however, we need to acknowledge that there are really two types of tools:
1) Tools that help us amplify our abilities as individuals (e.g. you can drive a nail into a board with a hammer much more effectively than with your hand or a rock because of the strength of the hammer’s material and the principle of leverage)
2) Tools that help us coordinate work across many humans, thereby, amplifying our individual abilities (e.g. You can build a house much faster and with better quality by leveraging different experts’ skills and using a shared set of blueprints for building construction, plumbing, electrical, heating/cooling, and so on)
The same distinction holds true for software development, deployment, and operations. One individual can theoretically gather requirements, build the software, test the software, deploy the software, and support the software while simultaneously project manage their personal time. Most computer science students have done this at one time or another, but when we are talking about enterprise applications that support core business functions it clearly doesn’t make sense because of the amount of effort required at each step and the specialized skills necessary for a high level of competency in each area.
What this means is that we absolutely need tools that amplify our abilities, or that of our individual teams, i.e. the hammers; but we also need to invest in tools that help us coordinate work across teams, i.e. the shared sets of blueprints.
Tools That Amplify Individual and Team Abilities
A lot of the tools attention in the DevOps community has been focused on: source code management systems like git or bitbucket; requirements planning tools like jira or rally; build tools like jenkins; automation tools like puppet, chef, and ansible; and project management tools like MS Project. These tools help us amplify work in each of these respective areas just like hammers, saws, drills, and screwdrivers perform specific functions when building a house and often follow a natural sequence (first you hammer boards in place to create a wall, then hammer on the sheet rock, then saw or drill holes in the sheetrock, screw in electrical outlets and fixtures, and so on.)
Just like building a house has a natural sequence, so does the sequence of tools from code to deployment and it’s often referred to as the DevOps “tool chain”. This whitepaper doesn’t cover each area of the typical DevOps tool chain (bug tracking, automated testing, and other categories are common too), the point is you need to take
￼￼￼￼www.ITinvolve.com 7
￼￼
￼A WHITEPAPER FOR IT LEADERS
Define Your DevOps Action Plan
time to define what the DevOps tool chain should be for your organization and to do so intentionally, taking into account the tool investments your organization already has, the needs and skillsets of your organization, and your own practical budget realities.
Do you have experience in using and self-supporting open source tools or do you have a preference for commercially provided tools? Are you comfortable having multiple requirements tools in different teams or business units, or do you want a single standard? Only you can answer these questions for your organization. There is no prescriptive formula for DevOps tools, although I’ve mentioned a number of commonly used ones.
Tools that Amplify Work Across Teams
The second area you should focus on are tools to help coordinate work and amplify abilities across teams, i.e. bridging the inherent gaps in the DevOps tool chain, a subject that has received less attention in the DevOps community to-date. This makes sense because it’s human nature to think first about our own function and team.
However, this silo thinking is one of the core problems DevOps was developed to address; the long-time focus on tools for specific IT “work stations” has actually entrenched the cultural silos of development, QA, operations, and project office in IT. For example, most IT organizations have two totally separate systems for tracking issues – in operations, it’s the service desk application and for code issues in development it’s the bug tracking application – and there is little or no relationship between them. In fact, you are lucky if an incident in the service desk can be tied to a bug tracking number.
If we are adopting DevOps in order to optimize the flow of new software releases to support business agility, then we need to look at how we will coordinate work and avoid information distortion and loss when different teams are using different, disconnected tools. In addition to your tool strategy for optimizing individual DevOps workstations, therefore, you also need to have a strategy for the tools that are going to help you effectively manage flow across those workstations.
Most DevOps transformation efforts start small with a core team of perhaps a dozen or so members, and they’re often located in one physical location. In this case, you might be able to make do with regular face-to-face meetings and general-purpose communication tools like email, instant messaging, and a SharePoint site or Wiki with MS Office documents. The scope of your cross-team collaboration tools aligns with the scope of your DevOps effort and you might be able to rely on people interactions to unify the tool chain.
But as you scale your DevOps efforts to larger, distributed teams across time zones and multiple business units and applications, your cross-team tools approach should scale as well. The point-to-point nature of instant messaging, ignored reply-all emails, and SharePoint ‘document dumps’ aren’t effective in coordinating the efforts of dozens or hundreds of developers, testers, admins, and project managers. Information gets lost, information gets overlooked, and the gaps in your tool chain expand. A feature misses a commit and doesn’t get into the build and isn’t deployed. An operational requirement is missed so the test environment isn’t configured properly and the release gets pushed. Three weeks are spent solving a performance issue through code when it could have
￼￼￼￼www.ITinvolve.com
8
￼￼
￼been addressed faster via hardware. A legacy application dependency in production is overlooked and the new mobile app doesn’t work in production as it did in test.
There is an emerging class of purpose-built IT collaboration tools, such as ITinvolve, that enable the creation of cross-team workspaces where information is proactively shared as IT teams and tools get work done. This helps large, distributed cross-functional teams collaborate more effectively with each other in-context to raise questions, provide answers, and incorporate what’s happening up and down the DevOps tool chain in their individual work.
For example, the developer will have better visibility into when the next build is going to occur and can ensure the feature is committed in time or can reach out to the build engineer in the workspace to request a delay in order to ensure the feature makes it in. The operations engineer can have earlier and better visibility into operational requirements so he can ensure the test environment is configured properly and avoid unnecessary delays. The legacy application dependency in production can be reproduced in test to ensure the application works properly once moved to production. And so on. By eliminating the handoff gaps and information loss across the DevOps tool chain, you can reduce the risk of communication issues, solve problems more holistically rather than individually, and better achieve the goal of improving business agility.
Defining Your Action Plan
In the first section, this whitepaper focused on the critical step of thinking about DevOps in the context of your organization’s applications. In the second section, four tips were provided to help foster a DevOps culture in your organization. In part three, the role of tools was discussed and how they can amplify (or constrain) individual and team abilities as well as work across teams.
In this fourth section, the previous topics of (A)pplications, (C)ulture, and (T)ools will be woven together to illustrate how to define your DevOps action plan. Given the breadth of these three areas, though, it’s easy to feel overwhelmed from the start.
￼￼￼￼www.ITinvolve.com 9
￼￼
￼A WHITEPAPER FOR IT LEADERS
Define Your DevOps Action Plan
Here’s a tip, whether you are a CEO, VP, or manager, smart leaders set a vision (often at least two or three years out) and then make small decisions every week with the goal of generally moving the organization or team in the direction of the vision over time.
With this in mind, first set a vision for DevOps as it relates to your Applications, your Culture, and your Tools. To set a DevOps vision for your applications, place each of your current applications into one of the three pace layers discussed in the first section – system of record, system of differentiation, or system of innovation. Then, do the same thing for any applications you are planning to add to your portfolio. With that context, specific to your organization, formulate a strategic vision for how DevOps will apply to your systems in each layer. Will you seek to have DevOps principles for continuous integration and continuous delivery in place for all of your systems of innovation, and if so, by when? How about for systems of differentiation? Will DevOps be the norm for each of those applications or just some, and by when? Then ask yourself the same questions about your systems of record.
Next, turn to your cultural vision. In the second section, the importance of baselining the degree of collaboration you have between the business, dev, and ops as well as how you view work (in workstations or in end-to-end flow terms) were discussed. How you incentivize people to modify their behavior both with respect to their roles and as individuals were also key points. With this as context, define your DevOps cultural vision. What does collaboration between the business and development look like in the future? What does collaboration look like between development and operations? How about between dev, QA, and ops? And don’t forget security too.
How will you recognize when your culture is optimized for flow? For example you might document a set of indicators to measure at regular intervals. Here are three good ones. How much work-in-process (WIP) do we have for Application X today vs. how much was there a quarter ago? What is the average time it takes from the definition of a requirement to its deployment in production today vs. a quarter ago? How often did we make updates to Application X in production this quarter vs. last quarter?
Now, consider your tools vision. Take a baseline of the tools you are using today for each step of the typical DevOps tool chain from requirements management to source code control and bug tracking through to build management, automated testing, configuration management and deployment. And don’t forget project management tools too. What is the state of your tool investment in each of these areas? Do you have gaps? Do you have multiple tools in the same area, and, if so, is that okay or do you want to standardize on one? Do your tools vary based on the applications they are used with (see pace-layering discussion above)?
Then take an inventory of your collaboration tools across dev and ops. Are you still mostly using email and sharepoint sites? What role does instant messaging play in your dev and ops teams today? What about conference calls and meetings? Once you’ve baselined where you are today, set a vision for where you want to be in the future. Are you looking to reduce the need for conference calls and meetings, and if so by how much (time or average number of participants)? What issues are you running into around email and IM communications that need to be addressed and also for SharePoint? Have you looked at the emerging class of DevOps collaboration tools and concepts such as ITinvolve and ChatOps? What role can they play in streamlining communications,
￼￼www.ITinvolve.com
10
￼￼
￼￼keeping people informed, and presenting information to staff so they don’t have to go hunting around for it in dozens of systems or call more meetings?
With this as background, define your DevOps tools vision by setting priorities for filling identified gaps and rationalizing existing investments, then set a general target time frame for each area.
Now that you’ve set a vision in each area – (A)pplications, (C)ulture, and (T)ools, it’s time to develop your short term action plan. First pick one or two applications to begin your DevOps journey. Ideally, they should be applications visible to the business and where you can lay claim to the impact DevOps can have on business goals like time-to-market and responsiveness to customer needs.
Once those applications are identified, take an inventory of all the people across your organization (including the business) and those responsible for the development and delivery of the selected applications. Develop a specific plan for how you will educate those individuals on DevOps principles (e.g. attend DevOpsDays, read The Phoenix Project, read a sets of articles and watch a set of seminar or demo recordings), and also develop a specific plan for how you will incentivize behavior changes for their roles as well as what is expected of first line managers to take individual personalities, skills, and experiences into account.
It’s also important not to ignore the people who aren’t participating in this first DevOps effort. Educate them as well, for example through an all-hands meeting and an email from leadership. Explain why the company is investing in DevOps transformation, why these applications have been chosen, and your long-term vision across Applications, Culture, and Tools to realize the transformation. Help them understand where the organization is going and why, and how it may impact them in the future. Avoid the perception that “the best people were picked for this DevOps effort and you are not among them” or that this group of people is being given license to do things that others can’t (e.g. make changes outside of the standard change management process) – otherwise, you risk reducing morale, good people leaving, and even sabotage of your DevOps efforts.
Once you’ve completed the above, map the relevant tools you have in place today for managing the development and delivery of these applications as well as the tools on your vision roadmap defined above that will be added or rationalized in the next six months.
By following the above recommendations, you will now have a clear action plan for the near term and a long- term vision you can use to guide daily decisions to move you closer to your vision. Lastly, don’t be rigid about your short-term plan or long-term vision, recognize that everyone is learning, including you, and that one of the key principles behind DevOps is the feedback loop!
We hope this paper is useful to you on your DevOps journey.
￼￼￼www.ITinvolve.com 11
￼￼
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼MAIN 877-741-8944 FAX 832-201-8104 WEB www.itinvolve.com EMAIL info@itinvolve.com
11200 Richmond Avenue, Suite 350 Houston, Texas 77082
￼￼￼￼A WHITEPAPER FOR IT LEADERS
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</Text>
        </Document>
        <Document ID="11">
            <Title>High-level timeline and schedule</Title>
            <Text>High level time line and schedule
</Text>
        </Document>
        <Document ID="12">
            <Title>Dicussion with Rob Hare</Title>
            <Text>Rob is the Architect and is very interested in establishing and PaaS solution for Betair - below are some notes captured from email conversations with Rob

Hi Corne, just been chatting to Matt about how you’ve advanced on docker; super cool. I’m just sharing some thoughts of mine around how I think we should approach machine creation. I am a big fan of Paas; the openshift stack is aligned to run docker.

Have a look through the below and chat some with Mat; Keen to hear thoughts on this as an option

https://openshift.github.io/
https://blog.openshift.com/openshift-v3-platform-combines-docker-kubernetes-atomic-and-more/

*The note worthy pieces:
            Redhat have been working to productionise docker
            Redhat also have a commercially supported offering of openshift, as well as a cloud offering so there is some good flexibility


Hi Rob,

I completely agree that we should look at providing a platform as a service and get to a point where Dev can provision their own VM’s / Containers and spin up infrastructure as required. This will be hugely beneficial in getting us to our continuous delivery “goal”.

Thanks for the links below.   

I have started to collect and categorise tools around Docker. (Please add to this if you see anything missing, or stumble upon something).
Containerization technologies like Docker moves so fast and we should constantly look and see what is out there. 

https://confluence.app.betfair/display/AusLinux/Docker+-+Related+Tools

Openshift have a few Docker related projects, and seem to be at the cutting edge around containerization tooling, looks very interesting.

I will certainly keep working with Matt on Docker. I have also been tasked to compile a report to look at continuous delivery and see how IS can work closer with DEV and allow for automated builds and deployments, promotion of builds to various delivery phases (DEV, PPx, NXT, PROD) and hopefully provide a PaaS solution within the organisation.

I’m aware of some “bare-metal” servers (6 or 8 of physical racks – not sure about specs) that we could use for a proof of concept PaaS solution. I have in the past worked with OpenStack and it also now supports container/Docker orchestration and we could evaluate this in conjunction with Openshift. 
https://wiki.openstack.org/wiki/Heat

This is very existing and we have a real opportunity here to make a difference! Lets keep the communication and workgroup going ?

Keep well and chat soon.
</Text>
        </Document>
        <Document ID="20">
            <Title>General Notes</Title>
            <Text>* Every commit a candidate for Deployment
* Build single deployable artifact
 * Continuous Delivery doesn’t mean every change is deployed to production. It means every change is proven to be deployable at any time.
* Continuous delivery is a capability to continually deploy software to production as frequently as needed.

Why CD?
=======
Improve speed to market
Ensured quality
Deploying code is seamless, no longer strenuous
Improves you disaster recovery / Business continuity
Improve business agility


Beginnings of a deployment pipeline
===========================
Commit Tests -&gt; Integration Tests -&gt; Deployable Artifact -&gt; Deploy to Env

SCM -&gt; 
Continuous Integration Tests (Unit Tests) -&gt;
 (optional) System Integration Tests (SIT) -&gt;
 (optional) Operational Acceptance Test (OAT) -&gt;
 (optional) Security Tests -&gt;
 (optional) Compliance Tests -&gt;
Deploy -&gt;
Deliver
</Text>
        </Document>
        <Document ID="13">
            <Title>Ramesh comms with Steve - CD from IS perspective</Title>
            <Text>Steve,

High level summary of what CD objectives are from an IS perspective

WHAT
Devs to be able to deploy Software to DEV?NXT?PP1/2/3
WHY 
Increase velocity/speed of deployments (Ultimately speed to market….)
HOW 
Partition Infrastructure Config/Application config into discrete components
Devs Responsible &amp; Accountable for Application Config
IS Responsible &amp; Accountable for Platform config
Build pipeline to facilitate automated promotion of packages from one Environment to the Next.
Automated Testing is a pre-requisite for this to succeed.
Automated Fortify scan of source code.

Thanks
Ramesh
</Text>
        </Document>
        <Document ID="3">
            <Title>Affected Parties</Title>
            <Text>Affected parties

[List business processes or systems which will be impacted by this project and describe how they will be affected.]

</Text>
        </Document>
        <Document ID="21">
            <Title>eBook_Benefits-of-Continuous-Delivery_v5</Title>
            <Text>￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼The ContinuousDelivery EffectUnderstanding the Benefits of Continuous DeliveryPOWERING CONTINUOUS DELIVERY￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼eBook
￼￼￼￼￼Software is Eating the WorldIn just about any industry, the success of an organization is increasingly shaped by the strength of its software. Mobile, Web, and embedded applications define how customers perceive your brand, how employees work and collaborate, and how competitive you are in the market.Users are increasingly intolerant of inconvenience, and impatient for gratification. Failure to meet customer expectations can bring swift and significant repercussions. To stay competitive, companies like Amazon, Flickr, and Etsy are embracing a development discipline known as Continuous Delivery.What is Continuous Delivery and how can it help you and your organization succeed in a software-driven economy?Read on and discover the gains Continuous Delivery can bring to your organization’s application owners, developers, and IT operations teams.￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
Continuous Delivery in a NutshellContinuous Delivery is a development discipline that takes the practice of Agile development to its logical conclusion, creating software that is always ready to release. It does this by building upon and extending Agile, Continuous Integration, and DevOps practices and tools to transform the way software is delivered.By automating routine and time-consuming build, test, and deploy processes—and exercising them early and often— Continuous Delivery brings predictability and repeatability to software pipelines, vastly improving release quality and frequency.With Continuous Delivery, production deployments become a boring, push-button process that can be accomplished by any entitled user at any time. This encourages smaller, more frequent releases— eliminating the risk inherent in larger and more complex “big bang” deployments.￼￼You’re doing CD when:• Your software is deployable throughout its lifecycle• Your team prioritizes keeping the software deployable over working on new features• Anybody can get fast, automated feedback on the production readiness of their systems any time somebody makes a change to them• You can perform push-button deployments of any version of the software to any environment on demand— Martin Fowler, 2013
￼Continuous Delivery:Benefits for Application OwnersBefore Continuous Delivery, organizations tended to focus on big-bang application releases, which required a lot of planning and development time and often ended in missed deadlines or buggy code.In Continuous Delivery environments, the business moves from a focus on big releases and long-term plans to small, frequent, and incremental releases that continue indefinitely.￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼At its core, DevOps is not about Dev. Or Ops. It’s about the business.￼￼￼￼￼It’s hard to define what DevOps is. But it’s easy tosee what it does. It enables a software delivery pipeline that emphasizes agility, reliability, availability, and security.￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
￼Continuous Delivery:Benefits for Application OwnersThis fundamental shift provides application owners with the ability to:￼Respond to market conditions. Quickly.￼Traditionally, application roadmaps were defined based on months of research. Teams commit to fulfilling these requirementsby agreeing to long-term plans and deliverables. Often, by the time the plans have been implemented, the market has moved on and requirements have changed.By delivering smaller batches of value on a regular basis, organizations can find out directly from customers whether the new feature or capability actually delivered the added the value or benefits expected.￼Improve quality and compliance.￼In large, distributed organizations it is hard, if not impossible, to enforce standards and verify compliance with policies. Without Continuous Delivery, business leaders have no way to determine whether code received 100% of the required testing or security validation.Because Continuous Delivery leverages automation across the lifecycle, it is much easier to enforce standardized processes, and ensure compliance with testing and security policies. This also results in systems with fewer issues at any given time, because complete testing coverage means bugs are discovered and fixed faster.￼Ship product on time.￼Have you ever missed a release date? You are not alone. Before Continuous Delivery, looming release dates placed increased stress on the development team, which often meant features had to be dropped in order to deliver a viable final product. QA and IT operations teams lacked the time necessary to perform sufficient testing. Once code is deployed, failures and quality issues were common.By combining well-rehearsed and automated processes with software that is always ready to release, Continuous Delivery provides the business the ability to ship on-demand. With Continuous Delivery, application owners can choose to deploy every feature the minute it’s ready, or hold features and bundle them together into a larger release.
￼￼Continuous Delivery:Benefits for Development TeamsBefore Continuous Delivery, development teams spent much of their time dealing with the process of software production, creating (and re-creating) scripts to handle CI tasks, documenting test requirements for QA teams, and waiting for feedback from unit and system testing.In Continuous Delivery environments, automation helps make the process disappear for developers, while ensuring that the tasks necessary to build, test, and release code are carried out efficiently.￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
￼Continuous Delivery:Benefits for Development TeamsContinuous Delivery provides developers with the ability to:￼Make process bulletproof and invisible.￼Without Continuous Delivery, processes associated with building, testing, and deploying software tended to be manual, with manyerror prone handoffs. When individual teams implement scripts to automate their part ofthe process, these scripts are difficult to share and aren’t easily portable to other projects or environments. This patchwork of processes makes it difficult to track the progressof software through the pipeline. Often, managers and staff members have to reference spreadsheets in order to track test coverage and code reviews.With Continuous Delivery, code commits immediately trigger processes that automatically compile and test any changes. This allows teams to focus on developing new incremental value, confident with the knowledge that automation will ensure their code is always ready for release into production.￼Get faster feedback.￼Before Continuous Delivery, lengthy build times, insufficient infrastructure resources, non-standard environments, and overworked QA teams bring Agile development to a crawl. These slow feedback loops mean developers either have to wait for test results (destroying productivity) or move on to other work to keep busy (requiring constant, time-sapping context switching). Once feedback is received, going back to fix issues requires developers to re- familiarize themselves with work they did hours, days, or even weeks prior.Automated testing and standardized environments are the foundation of Continuous Delivery, which means QA tests catch real problems, not configuration errors. Feedbackto the developer gets delivered faster, and is more actionable and more effective. As a result, errors can be fixed quickly—before they become expensive to repair.￼Eliminate the stress of application release.￼Without Continuous Delivery, the application lifecycle is characterized by a series of pointsat which code has to be “thrown over thewall” to successive QA and operations teams. Each hand off has its own set of efforts, which includes specifying context, configurations, test environments, and tests. Each step presentsan opportunity for friction, miscommunication, errors, and delays.In Continuous Delivery environments,when developers commit code, automation immediately carries it through all required testing processes—eliminating the stress, hassles, and delays of manual project handoffs. Instead of trying to memorize changing processes, and worrying about whether every step was adhered to, developers count on automation to execute the steps and workflows required. And because each commit results ina release-ready build, the decision to actually release can be made without requiring developer interaction or assistance.
￼Continuous Delivery: Benefits for IT OperationsBefore implementing Continuous Delivery, operationsteams are saddled with manually building and supporting development, testing, and production environments. Each of these environments may be unique – a “work of art” – each with its own nuances and customer configurations. Fundamentally, this inconsistency breeds issues. Variances mean that, even though the code a developer built ran fine on development machines, issues arise in testing. Worse, code that passes system testing often fails in production – leaving it up to customers to discover the issues.￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼The key test [of whether or not you’ve achieved CD] is that a business sponsor could request that the current development version of the software be deployed into production at a moment’s notice—and nobody would bat an eyelid, let alone panic.— Martin Fowler, 2013￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
￼Continuous Delivery: Benefits for IT OperationsBy leveraging Continuous Delivery, your operations teams can:￼Make deployments boring.￼Prior to implementing Continuous Delivery, each release is large and cumbersome to roll out—a massive, lengthy, and stress- filled undertaking. Further, given releases’ scale and complexity, it is hard to roll back to the prior version when issues arise— exacerbating the duration and penalties of having bugs surface in production.Continuous Delivery environments are characterized by releases that have fewer integration points and code branches, making them simple and stress-free to implement. Further, when finite changes and variables have to be managed, releases can be much more easily and quickly reverted if needed.￼Keep up with the rate of change.￼Before Continuous Delivery, change was a bad thing for IT operations teams. Because each change is massive, time consuming, and risky, operations staff members can’t change as fast as the business needs, and, for that matter, don’t really want to.Leveraging more automated, standardized, and modular approaches, operations can accommodate changes in an efficient, fast, and predictable fashion. Need to scale a test environment to accommodate more tests? Simply spin up additional virtual environments based on pre-defined configurations.￼Know what is deployed where.￼Before Continuous Delivery, development, testing, and production infrastructures are independently built and maintained. These unique environments make for a dizzying array of patch releases, hardware types, OS versions, and more—with all these variables manually tracked, monitored, and supported.In Continuous Delivery-driven environments, operations teams take a fundamentally different approach, effectively managing the infrastructure like code. With Continuous Delivery, standardization yields consistency and clarity across environments. Cookie- cutter, well-formulated templates providea foundation for tracking and managing environmental variables, with a minimum of uncertainty or guesswork.
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼POWERING CONTINUOUS DELIVERY￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼ConclusionCompetitive advantage, profits, and growth are increasingly tied to the applications a business brings to market. Continuous Delivery represents a vital approach for organizations that want to deliver application innovation to fuel improved business results. With Continuous Delivery, organizations gain the agility needed to deliver innovation faster, while boosting staff efficiency and managing costs.￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
￼About Electric CloudElectric Cloud powers Continuous Delivery. We help mobile, embedded systems and enterprise web/IT providers deliver better software faster by automating and accelerating build, test, and deployment processes at scale. Industry leaders like Qualcomm, SpaceX, Cisco, GE, Gap, and E*TRADE use Electric Cloud solutions and services to boost DevOps productivity and Agile throughput.For more information, visit http://www.electric-cloud.com.￼￼￼￼￼￼￼￼￼￼￼￼￼￼www.electric-cloud.comCorporate HeadquartersElectric Cloud, Inc.35 S. Market Street Suite 100 San Jose, CA 95113T: 408.419.4300F: 408.419.4399 info@electric-cloud.comElectric Cloud Europe1 Northumberland Avenue Trafalgar Square, LondonWC2N 5BW United KingdomT: +44(0)207 872 5500 europe.info@electric-cloud.comElectric Cloud Japan KK22F Shibuya Mark City West 1-12-1 Dogenzaka, Shibuya-ku Tokyo 150-0043 JapanT: +81.3.4360.5375 japan-info@electric-cloud.com</Text>
        </Document>
        <Document ID="14">
            <Title>02_CD_test_strategy_low-res</Title>
        </Document>
        <Document ID="4">
            <Title>Background</Title>
            <Text>Project background and description

This document outlines a continuous delivery action plan for ultimate adoption within Betfair Australia. A common goal for continuous delivery is to enable faster release and deployment cycles by taking advantage of agile development methodologies; improved collaboration between development and operations teams and the adoption of fit-for-purpose automation tools. Automation tools enables continuous integration of developed code and the continuous deployment of new features into provisioned environments. It’s important to remember that there is no “one-size_fits-all” when rolling out a continuous delivery action plan. Careful consideration should be given to type of tools and processes already adopted within Betfair with an ultimate goal to have minimal disruption. 

Continuous delivery is ultimately about increasing velocity of deployments to get faster delivery of new features and fixes.  






  For a phase 1 focus will be give to the Sportsbook/Wagerplayer product given that it is a  
</Text>
        </Document>
        <Document ID="22">
            <Title>Benefits CD</Title>
            <Text>What is continuous delivery?
Continuous delivery is a design practice which is used in software development to improve the software delivery. The product backlog should reflect the business needs based on what customers want. User stories with the highest priority should be on top and are done first. When features are done you don’t want these to collect dust on the shelf. These should be delivered as quickly as possible to the customer. When having a higher frequency in delivering the software the new functionality will reach the customer more quickly. This allows you to collect feedback and improve your product. The benefits of continuous delivery are:
	▪	Speed: Delivering new functionality or resolve bugs quickly to the end user which should fulfill the business needs.
	▪	Quality: By delivering your software quicker the change impact is reduced and allows you to get quicker feedback
	▪	Focus: With focusing only the features that are delivered during the sprint the impact is less if you apply a couple of sprints combined. This allows the team to focus on a minimal set features which also results in less stress.
Functional and unit testing
To achieve continuous delivery testing your product becomes crucial. With applying unit testing in combination with functional testing you should cover the most features of your product. Code coverage does not always confirm that it is tested properly. Focus on the most important parts of your code. With functional testing create happyflows which should cover the basic flows of your product. For example, begin with the setup and configuration and after this the basic actions within the product. It is important to validate the outcome from the functional tests. Improving the unit and functional testing should be an ongoing process but start with the basics. Based on the reported bugs you could create a new unit and functional tests so this bug cannot occur again.
By automating this your product is automatically tested and this allows the product owner or acceptance team to focus on the delivered features or resolved bugs.
Team effort
It is a team effort to achieve continuous delivery. When your organization has separate departments for testing this can interrupt the flow of the software release cycle. A way to improve this is to mix development and testing in one team. When testing within the same team allows a developer to quickly discuss a rejected user story. This will improve communication and miss communication is reduced.
Delivering the software
Depending on the type of software, delivering on a high frequency can be challenging. When the application is running in a self hosted environment you are in control of applying changes. With traditional software automatic updates allows you to deliver the software to your customer. In managed environments this will be disabled. It is important to notify the customer why you are releasing on this high frequency so they see the benefits.
</Text>
        </Document>
        <Document ID="15">
            <Title>03_CD_automated_acceptance_test_low-res</Title>
        </Document>
        <Document ID="5">
            <Title>Scope</Title>
            <Synopsis>Defines the boundaries of a project. Think of the scope as an imaginary box that will enclose all the project elements/activities. It not only defines what you are doing (what goes into the box), but it sets limits for what will not be done as part of the project (what doesn’t fit in the box).  Scope answers questions including what will be done, what won’t be done, and what the result will look like.]</Synopsis>
            <Text>Project scope

Project scope defines the boundaries of a project. Think of the scope as an imaginary box that will enclose all the project elements/activities. It not only defines what you are doing (what goes into the box), but it sets limits for what will not be done as part of the project (what doesn’t fit in the box).  Scope answers questions including what will be done, what won’t be done, and what the result will look like.]

</Text>
        </Document>
        <Document ID="6">
            <Title>High-level requirements</Title>
            <Text>High-level requirements
</Text>
        </Document>
        <Document ID="16">
            <Title>04_CD_managing_data_low-res</Title>
        </Document>
        <Document ID="7">
            <Title>Deliverables</Title>
            <Text>Deliverables

[List agencies, stakeholders or divisions which will be impacted by this project and describe how they will be affected by the project.]


</Text>
        </Document>
        <Document ID="8">
            <Title>Affected business processes and systems</Title>
            <Text>Affected business processes and systems
</Text>
        </Document>
        <Document ID="17">
            <Title>01_CD_the_idea_low-res</Title>
        </Document>
        <Document ID="9">
            <Title>Specific exclusions from Scope</Title>
            <Text>Specific exclusions from scope</Text>
        </Document>
    </Documents>
</SearchIndexes>