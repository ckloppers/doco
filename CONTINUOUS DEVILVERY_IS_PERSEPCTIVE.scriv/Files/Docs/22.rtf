{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Light;\f2\fnil\fcharset0 LucidaGrande;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red42\green42\blue42;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\deftab720
\pard\pardeftab720\sl487\sa243

\f0\b\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What is continuous delivery?\
\pard\pardeftab720\sl487\sa487

\f1\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Continuous delivery is a design practice\'a0which is used in software development to improve the software delivery. The product backlog should reflect the business needs based on what customers want. User stories with the highest priority should be on top and are done first.\'a0When features are done you don\'92t want these to collect dust on the shelf. These should be delivered as quickly as possible to the customer. When having a higher frequency in delivering the software the new functionality will reach the customer more quickly. This allows you to collect feedback and improve\'a0your product. The\'a0benefits of continuous delivery are:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl487
\ls1\ilvl0
\f0\b \cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Speed
\f1\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 : Delivering new functionality or resolve bugs quickly to the end user which should fulfill the business needs.\cb1 \
\ls1\ilvl0
\f0\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Quality
\f1\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 : By delivering your software quicker the change impact is reduced and allows you to get quicker feedback\cb1 \
\ls1\ilvl0
\f0\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Focus
\f1\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 : With focusing only the features that are delivered during the sprint the impact is less if you apply a couple of sprints combined. This allows the team to focus on a minimal set features which also results in less stress.\cb1 \
\pard\pardeftab720\sl487\sa243

\f0\b \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Functional and unit\'a0testing\
\pard\pardeftab720\sl487\sa487

\f1\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 To achieve continuous delivery\'a0testing your product becomes crucial. With applying unit testing in combination with functional testing you should cover the most features of your product. Code coverage does not always confirm that it is tested properly. Focus on the most important parts of your code. With functional testing create happyflows which should cover the basic flows of your product. For example, begin with the setup and configuration and after this\'a0the basic actions within the product.\'a0It is important to validate the outcome from the functional tests. Improving the unit\'a0and functional testing should be an ongoing process but start with the basics. Based on the reported bugs you could create a new unit\'a0and functional tests so this\'a0bug cannot occur again.\
By automating\'a0this your product is automatically tested and this allows the product owner or acceptance team to focus on the delivered features or resolved bugs.\
\pard\pardeftab720\sl487\sa243

\f0\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Team effort\
\pard\pardeftab720\sl487\sa487

\f1\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 It is a\'a0team effort to achieve continuous delivery. When your organization has separate departments for testing this can interrupt the flow of the software release cycle.\'a0A way to improve this is to mix development and testing in one team. When testing within the same team allows a developer\'a0to\'a0quickly discuss\'a0a\'a0rejected user\'a0story.\'a0This will improve communication and miss communication is reduced.\
\pard\pardeftab720\sl487\sa243

\f0\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Delivering the software\
\pard\pardeftab720\sl487\sa487

\f1\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Depending on the type of software, delivering on a high frequency can be challenging.\'a0When the application is running in a self hosted environment\'a0you are in control of applying changes. With traditional software automatic updates allows you to deliver the software to your customer. In managed environments this will be disabled. It is important to notify the customer why you are releasing on this high frequency so they see the benefits.\
}